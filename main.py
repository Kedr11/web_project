import asyncio
import discord
import yt_dlp
from token_project import TOKEN
from discord.ext import commands
from googletrans import Translator
import sqlite3

yt_dlp.utils.bug_reports_message = lambda: ''

ytdl_format_options = {
    'format': 'bestaudio/best',
    'outtmpl': '%(extractor)s-%(id)s-%(title)s.%(ext)s',
    'restrictfilenames': True,
    'noplaylist': True,
    'nocheckcertificate': True,
    'ignoreerrors': False,
    'logtostderr': False,
    'quiet': True,
    'no_warnings': True,
    'default_search': 'auto',
    'source_address': '0.0.0.0',
}

ffmpeg_options = {
    'options': '-vn',
}

ytdl = yt_dlp.YoutubeDL(ytdl_format_options)


class YTDLSource(discord.PCMVolumeTransformer):  # –ø–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É –≤ —é—Ç—É–±–µ
    def __init__(self, source, *, data, volume=0.5):
        super().__init__(source, volume)

        self.data = data

        self.title = data.get('title')
        self.url = data.get('url')

    @classmethod
    async def from_url(cls, url, *, loop=None, stream=False):
        loop = loop or asyncio.get_event_loop()
        data = await loop.run_in_executor(None, lambda: ytdl.extract_info(url, download=not stream))

        if 'entries' in data:
            data = data['entries'][0]

        filename = data['url'] if stream else ytdl.prepare_filename(data)
        return cls(discord.FFmpegPCMAudio(filename, **ffmpeg_options), data=data)


class Music(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.queue = {}

    @commands.command()
    async def join(self, ctx, *, channel: discord.VoiceChannel):
        if ctx.voice_client is not None:
            return await ctx.voice_client.move_to(channel)

        await channel.connect()

    @commands.command()
    async def play(self, ctx, *, url):  # –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç —Ç—Ä–µ–∫, –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –∫–∞–∫ —Å—Å—ã–ª–∫—É, —Ç–∞–∫ –∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ
        async with ctx.typing():
            player = await YTDLSource.from_url(url, loop=self.bot.loop, stream=True)
            ctx.voice_client.play(player, after=lambda e: print(f'Player error: {e}') if e else self.play_next(ctx))
        await ctx.send(f'–°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç: {player.title}')

    @commands.command()
    async def volume(self, ctx, volume: int):
        if ctx.voice_client is None:
            return await ctx.send("–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É.")

        ctx.voice_client.source.volume = volume / 100
        await ctx.send(f"–ì—Ä–æ–º–∫–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {volume}%")

    @commands.command()
    async def stop(self, ctx):
        await ctx.voice_client.disconnect()

    @commands.command()
    async def pause(self, ctx):
        await ctx.voice_client.pause()
        await ctx.send('–ú—É–∑—ã–∫–∞ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø–∞—É–∑—É')

    @commands.command()
    async def resume(self, ctx):
        await ctx.voice_client.resume()

    @commands.command()
    async def queue(self, ctx, *, url):
        guild_id = ctx.guild.id
        if guild_id not in self.queue:
            self.queue[guild_id] = []
        self.queue[guild_id].append(url)
        await ctx.send(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å: {url}")

    @commands.command(name='play-q')
    async def play_q(self, ctx):  # –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç —Ç—Ä–µ–∫, –ø–µ—Ä–≤—ã–π —Å—Ç–æ—è—â–∏–π –≤ –æ—á–µ—Ä–µ–¥–∏
        async with ctx.typing():
            player = await YTDLSource.from_url(self.queue[ctx.guild.id].pop(0), loop=self.bot.loop, stream=True)
            ctx.voice_client.play(player, after=lambda e: print(f'–û—à–∏–±–∫–∞ –ø–ª–µ–µ—Ä–∞: {e}') if e else self.play_next(ctx))
        await ctx.send(f'–°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç: {player.title}')

    @commands.command(name='q-info')
    async def q_info(self, ctx):
        q = self.queue[ctx.guild.id]
        for i in range(len(q)):
            response = str(i + 1) + '. ' + q[i]
            await ctx.send(response)

    @play.before_invoke
    @play_q.before_invoke
    async def ensure_voice(self, ctx):
        if ctx.voice_client is None:
            if ctx.author.voice:
                await ctx.author.voice.channel.connect()
            else:
                await ctx.send("–í—ã –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É")
                raise commands.CommandError("–ê–≤—Ç–æ—Ä –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É")
        elif ctx.voice_client.is_playing():
            ctx.voice_client.stop()

    def play_next(self, ctx):
        if ctx.guild.id in self.queue and self.queue[ctx.guild.id]:
            url = self.queue[ctx.guild.id].pop(0)
            asyncio.run_coroutine_threadsafe(self.play(ctx, url=url), self.bot.loop)
        else:
            asyncio.run_coroutine_threadsafe(ctx.send("–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞"), self.bot.loop)


# –ö–ª–∞—Å—Å –¥–ª—è –∫–æ–º–∞–Ω–¥ –ø–µ—Ä–µ–≤–æ–¥–∞
class TranslateBot(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.translator = Translator()

    @commands.command(name="translate")
    async def translate(self, ctx, target_language: str, *,
                        text=None):  # —è–∑—ã–∫, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏–º –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞–ø–∏—Å–∞–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
        if text:
            translated = self.translator.translate(text, dest=target_language)
            await ctx.send(f"–ü–µ—Ä–µ–≤–æ–¥: {translated.text}")
        else:
            if ctx.message.reference and ctx.message.reference.message_id:
                referenced_message = await ctx.channel.fetch_message(ctx.message.reference.message_id)

                if referenced_message.content:
                    translated = self.translator.translate(referenced_message.content, dest=target_language)
                    await ctx.send(f"–ü–µ—Ä–µ–≤–æ–¥: {translated.text}")
                else:
                    await ctx.send("–°–æ–æ–±—â–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.")
            else:
                await ctx.send("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–≤–µ—Ç–∏–ª–∏. –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")


class Survey(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.active_surveys = {}

    @commands.command(name="survey")
    async def create_survey(self, ctx, *, content: str):  # !survey –í–æ–ø—Ä–æ—Å? ; –û–ø—Ü–∏—è 1, –û–ø—Ü–∏—è 2, –û–ø—Ü–∏—è 3

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è
        if ';' not in content:
            await ctx.send("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ';' —á—Ç–æ–±—ã —Ä–∞–∑–¥–µ–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å –æ—Ç –æ–ø—Ü–∏–π.")
            return

        # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –∏ –æ–ø—Ü–∏–π
        question, raw_options = content.split(';', 1)
        options = [opt.strip() for opt in raw_options.split(',')]

        if len(options) < 2:
            await ctx.send("–î–ª—è –æ–ø—Ä–æ—Å–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ö–æ—Ç—è –±—ã –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞.")
            return

        if ctx.channel.id in self.active_surveys:
            await ctx.send("–í —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ —É–∂–µ –∏–¥–µ—Ç –æ–ø—Ä–æ—Å. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –µ–≥–æ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π.")
            return

        survey_message = await ctx.send(f"**–û–ø—Ä–æ—Å:** {question}\n" +
                                        "\n".join(f"{i + 1}. {opt}" for i, opt in enumerate(options)))

        emoji_numbers = ['1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£', '5Ô∏è‚É£', '6Ô∏è‚É£', '7Ô∏è‚É£', '8Ô∏è‚É£', '9Ô∏è‚É£', 'üîü']
        for i in range(len(options)):
            await survey_message.add_reaction(emoji_numbers[i])

        self.active_surveys[ctx.channel.id] = {
            "question": question,
            "options": list(options),
            "message_id": survey_message.id,
            "reactions": emoji_numbers[:len(options)]
        }

    @commands.command(name="end-survey")
    async def end_survey(self, ctx):
        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ –≤ —Ç–µ–∫—É—â–µ–º –∫–∞–Ω–∞–ª–µ
        if ctx.channel.id not in self.active_surveys:
            await ctx.send("–í —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤.")
            return

        survey = self.active_surveys.pop(ctx.channel.id)
        survey_message = await ctx.channel.fetch_message(survey["message_id"])

        # –ü–æ–¥—Å—á–µ—Ç –≥–æ–ª–æ—Å–æ–≤
        results = {opt: 0 for opt in survey["options"]}

        for reaction in survey_message.reactions:
            if reaction.emoji in survey["reactions"]:
                idx = survey["reactions"].index(reaction.emoji)
                results[survey["options"][idx]] = reaction.count - 1

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        result_message = "**–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–∞:**\n" + "\n".join(f"{opt}: {count}" for opt, count in results.items())
        await ctx.send(result_message)

    @commands.command(name="active-survey")
    async def active_survey(self, ctx):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –æ–ø—Ä–æ—Å –≤ —Ç–µ–∫—É—â–µ–º –∫–∞–Ω–∞–ª–µ
        if ctx.channel.id in self.active_surveys:
            survey = self.active_surveys[ctx.channel.id]

            await ctx.send(f"–í —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ –∏–¥–µ—Ç –æ–ø—Ä–æ—Å: {survey['question']}")
        else:
            await ctx.send("–í —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤.")


class DatabaseHandler:
    def __init__(self, db_name):
        self.conn = sqlite3.connect(db_name)
        self.create_tables()

    def create_tables(self):
        with self.conn:
            self.conn.execute(
                """
                CREATE TABLE IF NOT EXISTS questions (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    question TEXT,
                    answer TEXT
                )
                """
            )
            self.conn.execute(
                """
                CREATE TABLE IF NOT EXISTS trivia_scores (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    name TEXT,
                    score INTEGER
                )
                """
            )

    def add_question(self, question, answer):
        with self.conn:
            self.conn.execute(
                "INSERT INTO questions (question, answer) VALUES (?, ?)",
                (question, answer)
            )

    def get_random_question(self):
        cursor = self.conn.execute(
            "SELECT * FROM questions ORDER BY RANDOM() LIMIT 1"
        )
        return cursor.fetchone()

    def save_trivia_result(self, name, score):
        with self.conn:
            self.conn.execute(
                "INSERT INTO trivia_scores (name, score) VALUES (?, ?)",
                (name, score)
            )

    def get_top_scores(self, limit=10):
        cursor = self.conn.execute(
            "SELECT * FROM trivia_scores ORDER BY score DESC LIMIT ?",
            (limit,)
        )
        return cursor.fetchall()


# –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∏–∫—Ç–æ—Ä–∏–Ω–æ–π
class TriviaGame:
    def __init__(self, db_handler):
        self.db_handler = db_handler
        self.active = False
        self.current_question = None
        self.correct_answer = None
        self.scores = {}

    async def start(self, ctx):
        self.active = True
        await ctx.send("–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –Ω–∞—á–∞–ª–∞—Å—å! –ì–æ—Ç–æ–≤—ã?")
        while self.active:
            await self.ask_question(ctx)
            await asyncio.sleep(5)  # –Ω–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –≤–æ–ø—Ä–æ—Å–∞–º–∏

    async def ask_question(self, ctx):
        self.current_question = self.db_handler.get_random_question()
        if not self.current_question:
            await ctx.send("–í–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
            self.active = False
            return

        question, self.correct_answer = self.current_question[1], self.current_question[2]
        await ctx.send(f"–í–æ–ø—Ä–æ—Å: {question}")

        # –¢–∞–π–º–µ—Ä –¥–ª—è –ø—Ä–∏–µ–º–∞ –æ—Ç–≤–µ—Ç–æ–≤
        await self.accept_answers(ctx)

    async def accept_answers(self, ctx):
        def check(m):
            return m.channel == ctx.channel and not m.author.bot

        try:
            msg = await ctx.bot.wait_for("message", check=check, timeout=30)
            if msg.content.lower() == self.correct_answer.lower():
                winner = msg.author
                await ctx.send(f"{winner.mention} –æ—Ç–≤–µ—Ç–∏–ª –ø—Ä–∞–≤–∏–ª—å–Ω–æ! –í–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç: {self.correct_answer}")

                # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–ª—ã
                if winner.id not in self.scores:
                    self.scores[winner.id] = 0
                self.scores[winner.id] += 1
            else:
                await ctx.send("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç.")

        except asyncio.TimeoutError:
            await ctx.send(f"–í—Ä–µ–º—è –≤—ã—à–ª–æ! –í–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç: {self.correct_answer}")

    async def end(self, ctx):
        self.active = False
        await ctx.send("–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        for player_id, score in self.scores.items():
            user = await ctx.bot.fetch_user(player_id)
            self.db_handler.save_trivia_result(user.name, score)

    def is_active(self):
        return self.active


class TriviaBot(commands.Cog):
    def __init__(self, bot, db_handler, trivia_game):
        self.bot = bot
        self.db_handler = db_handler
        self.trivia_game = trivia_game

    @commands.command(name="start-trivia")
    async def start_trivia(self, ctx):
        if self.trivia_game.is_active():
            await ctx.send("–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ —É–∂–µ –∏–¥–µ—Ç.")
        else:
            await self.trivia_game.start(ctx)

    @commands.command(name="end-trivia")
    async def end_trivia(self, ctx):
        if self.trivia_game.is_active():
            await self.trivia_game.end(ctx)
        else:
            await ctx.send("–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

    @commands.command(name="add-question")
    async def add_question(self, ctx, *, input_data):
        question, answer = input_data.split(";")
        self.db_handler.add_question(question.strip(), answer.strip())
        await ctx.send("–í–æ–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω.")

    @commands.command(name="show-leader")
    async def show_leader(self, ctx):
        top_scores = self.db_handler.get_top_scores()
        response = "–¢–æ–ø 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:\n"
        for score in top_scores:
            response += f"{score[1]}: {score[2]} –±–∞–ª–ª–æ–≤\n"
        await ctx.send(response)


intents = discord.Intents.default()
intents.message_content = True
bot = commands.Bot(
    command_prefix=commands.when_mentioned_or("!"),
    description='Relatively simple music bot example',
    intents=intents,
)

db_handler = DatabaseHandler("trivia.db")
trivia_game = TriviaGame(db_handler)


@bot.command(name='commands')
async def commands__(ctx):
    commands_ = {
        '!play': "–Ω–∞—á–∏–Ω–∞–µ—Ç –∏–≥—Ä–∞—Ç—å –º—É–∑—ã–∫—É, –µ—Å–ª–∏ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∫–∞–Ω–∞–ª–µ. –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∫–∞–∫ —Å—Å—ã–ª–∫—É, —Ç–∞–∫ –∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ",
        '!stop': "–±–æ—Ç –ø–µ—Ä–µ—Å—Ç–∞–µ—Ç –∏–≥—Ä–∞—Ç—å –º—É–∑—ã–∫—É –∏ –≤—ã—Ö–æ–¥–∏—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞",
        '!pause': "—Å—Ç–∞–≤–∏—Ç –º—É–∑—ã–∫—É –Ω–∞ –ø–∞—É–∑—É",
        '!resume': "–ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –∏–≥—Ä–∞—Ç—å –º—É–∑—ã–∫—É",
        '!volume': "—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –≥—Ä–æ–º–∫–æ—Å—Ç—å, –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ",
        '!queue': '–¥–æ–±–∞–≤–ª—è–µ—Ç —Ç—Ä–µ–∫ –≤ –æ—á–µ—Ä–µ–¥—å',
        '!q-info': '–≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏',
        '!play-q': '–ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç —Ç—Ä–µ–∫, –ø–µ—Ä–≤—ã–π —Å—Ç–æ—è—â–∏–π –≤ –æ—á–µ—Ä–µ–¥–∏',
        '!translate': '–ø–µ—Ä–µ–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã —è–∑—ã–∫, {—è–∑—ã–∫, –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º} {—Å–æ–æ–±—â–µ–Ω–∏–µ}',
        '!survey': '—É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–ø—Ä–æ—Å, !survey –í–æ–ø—Ä–æ—Å? | –û–ø—Ü–∏—è 1, –û–ø—Ü–∏—è 2, –û–ø—Ü–∏—è 3',
        '!end-survey': '–∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç –æ–ø—Ä–æ—Å',
        '!active-survey': '–≤—ã–≤–æ–¥–∏—Ç –∞–∫—Ç–∏–≤–Ω—ã–π –æ–ø—Ä–æ—Å',
        '!start-trivia': '–Ω–∞—á–∏–Ω–∞–µ—Ç –≤–∏–∫—Ç–æ—Ä–∏–Ω—É',
        "!end-trivia": '–∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç –≤–∏–∫—Ç–æ—Ä–∏–Ω—É',
        '!add-question': '–¥–æ–±–∞–≤–ª—è–µ—Ç –≤–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç –≤ –±–¥, {–≤–æ–ø—Ä–æ—Å}; {–æ—Ç–≤–µ—Ç}',
        '!show-leader': '–≤—ã–≤–æ–¥–∏—Ç —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤',
    }
    for elem in commands_:
        await ctx.send(f'{elem} - {commands_[elem]}')


@bot.event
async def on_message(message):
    if message.author == bot.user:
        return

    await bot.process_commands(message)


@bot.event
async def on_ready():
    print(f'Logged in as {bot.user} (ID: {bot.user.id})')
    print('------')


async def main():
    async with bot:
        await bot.add_cog(Music(bot))
        await bot.add_cog(TranslateBot(bot))
        await bot.add_cog(Survey(bot))
        await bot.add_cog(TriviaBot(bot, db_handler, trivia_game))
        await bot.start(TOKEN)


asyncio.run(main())
